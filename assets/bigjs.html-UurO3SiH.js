import{_ as t,c,e as p,a as s,b as a,d as o,o as l,r as i}from"./app-DKLT9RiB.js";const u={},r={href:"https://github.com/MikeMcl/big.js/archive/v5.2.2.tar.gz",target:"_blank",rel:"noopener noreferrer"};function k(d,n){const e=i("ExternalLinkIcon");return l(),c("div",null,[n[4]||(n[4]=p(`<h2 id="js-精度问题" tabindex="-1"><a class="header-anchor" href="#js-精度问题"><span>js 精度问题</span></a></h2><p>当使用 JavaScript 进行数值计算时，会面临一些精度问题，这些问题可能会导致不正确的结果。以下是一些常见的奇奇怪怪的 js 数据精度问题：</p><h3 id="_1-浮点数精度问题" tabindex="-1"><a class="header-anchor" href="#_1-浮点数精度问题"><span>1. 浮点数精度问题</span></a></h3><p>在 JS 中，浮点数的精度有限。例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token comment">// 结果为0.30000000000000004</span></span>
<span class="line"><span class="token number">23.327</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token comment">// 结果为2332.7000000000003</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个结果显然不符合我们的期望。因为这是由于浮点数本身就无法表示 0.1 和 0.2 精确值。</p><p>解决方案：可以使用 <code>toFixed</code> 方法将其转换为字符串保留特定位数的小数，或者使用 Big.js 库中的 <code>Big</code> 对象。</p><h3 id="_2-整数运算超出范围" tabindex="-1"><a class="header-anchor" href="#_2-整数运算超出范围"><span>2. 整数运算超出范围</span></a></h3><p>在 JS 中，整数运算的范围为 -2^53 ~ 2^53。当运算结果超出该范围时，会发生奇怪的事情，例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// 结果为9007199254740992</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>解决方案：可以使用 BigInt 类型进行更大范围的整数运算，但是要注意支持性不够广泛，需在浏览器和 Node.js 环境中提供额外的支持。</p><h3 id="_3-数字类型转换问题" tabindex="-1"><a class="header-anchor" href="#_3-数字类型转换问题"><span>3. 数字类型转换问题</span></a></h3><p>在 JS 中，数字类型之间的转换也可能会导致奇怪的问题。例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token string">&#39;10&#39;</span> <span class="token operator">&gt;</span> <span class="token string">&#39;9&#39;</span> <span class="token comment">// 结果为false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>原因是在字符串比较中，比较的是字符编码而不是实际的数字大小。</p><p>解决方案：可以使用 <code>parseInt</code> 或者 <code>parseFloat</code> 将字符串转换为数字，或者使用 <code>Number</code> 函数将字符串强制类型转换为数字。</p><h3 id="_4-小数点后多余的零" tabindex="-1"><a class="header-anchor" href="#_4-小数点后多余的零"><span>4. 小数点后多余的零</span></a></h3><p>在 JS 中，将一个小数转换成字符串时，如果它没有小数部分，那么默认会添加 <code>.0</code>。例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span> <span class="token comment">// 结果为&quot;1.0&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这种自动添加小数点可能会导致输出结果与预期不符。</p><p>解决方案：可以使用 <code>Number.prototype.toFixed()</code> 来保持一定的小数点位数，或者使用 <code>Number.prototype.toPrecision()</code> 来控制总位数。</p><h2 id="big-js" tabindex="-1"><a class="header-anchor" href="#big-js"><span>Big.js</span></a></h2><p>Big.js 是一个 JavaScript 的 “任意精度” 数字库，能够处理普通数字无法表示的大数字计算。这个库可以非常有用，例如在金融交易、密码学和科学计算中。</p><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h3><p>Big.js 可以通过多种途径来安装：</p>`,25)),s("ul",null,[n[2]||(n[2]=s("li",null,[a("npm 安装: "),s("code",null,"npm install big.js")],-1)),s("li",null,[n[1]||(n[1]=a("下载源码包: ")),s("a",r,[n[0]||(n[0]=a("github.com/MikeMcl/big…")),o(e)])]),n[3]||(n[3]=s("li",null,[a("在线 CDN 引入: "),s("code",null,'<script src="https://cdn.jsdelivr.net/npm/big.js@5.2.2/big.min.js"><\/script>')],-1))]),n[5]||(n[5]=p(`<h3 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法"><span>使用方法</span></a></h3><p>在代码中引入 big.js：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> Big <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;big.js&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="创建一个-big-对象" tabindex="-1"><a class="header-anchor" href="#创建一个-big-对象"><span>创建一个 Big 对象</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Big</span><span class="token punctuation">(</span><span class="token number">123.4567</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token function">Big</span><span class="token punctuation">(</span><span class="token number">987654321.123456789</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> z <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Big</span><span class="token punctuation">(</span><span class="token string">&#39;123456789012345678901234567890&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码创建了三个 Big 对象。你可以将任何字符串、数字或其他 Big 对象传递给构造函数。请注意，只有字符串才能正确表示 0.1、0.01 等小数。我们可以用以下方式来打印这些对象的值：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;123.4567&quot;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;987654321.123456789&quot;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>z<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;123456789012345678901234567890&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="进行运算" tabindex="-1"><a class="header-anchor" href="#进行运算"><span>进行运算</span></a></h3><p>Big.js 支持 +、-、*、/、mod、pow、sqrt 和 abs 操作。下面是代码示例：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">Big</span><span class="token punctuation">(</span><span class="token number">123.4567</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token function">Big</span><span class="token punctuation">(</span><span class="token string">&#39;987654321.123456789&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;987654444.580156789&quot;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;-987654197.666756789&quot;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">times</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;121931366283.89509775303&quot;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;0.00012468606749151914&quot;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">mod</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;123.4567&quot;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;18604128.120667185023&quot;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;11.107774091203273684&quot;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;123.4567&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="设置运算精度" tabindex="-1"><a class="header-anchor" href="#设置运算精度"><span>设置运算精度</span></a></h3><p>默认情况下，Big.js 将结果四舍五入到 20 位数字。但是你可以更改这个精度设置。这里提供了两种方式：</p><h4 id="全局配置" tabindex="-1"><a class="header-anchor" href="#全局配置"><span>全局配置</span></a></h4><p>在全局范围内，你可以通过 Big.RM 和 Big.DP 来更改默认设置。RP（Rounding Precision）指定了四舍五入的精度（默认为 20），而 DP（Decimal Places）指定了默认保留的小数位数。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">Big<span class="token punctuation">.</span><span class="token constant">RM</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 舍去模式（0 表示四舍五入）</span></span>
<span class="line">Big<span class="token punctuation">.</span><span class="token constant">DP</span> <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment">// 小数点后保留 10 位</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="局部配置" tabindex="-1"><a class="header-anchor" href="#局部配置"><span>局部配置</span></a></h4><p>如果你不想全局更改设置，那么可以在每次操作时单独进行设置。以下是如何使用它们：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Big</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Big</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">x<span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token comment">// &#39;0.33333333333333333333&#39;</span></span>
<span class="line">x<span class="token punctuation">.</span>dp <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment">// 将小数点后的位数设置为 2</span></span>
<span class="line">x<span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token comment">// &#39;0.33&#39;</span></span>
<span class="line">x<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 四舍五入至整数</span></span>
<span class="line">x<span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &#39;0.3&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="十六进制和二进制格式" tabindex="-1"><a class="header-anchor" href="#十六进制和二进制格式"><span>十六进制和二进制格式</span></a></h3><p>当处理加密哈希等特殊数据类型时，十六进制和二进制格式的数字显得尤为重要。Luckily, Big.js 提供了相关方法。以下是相关代码示例：</p><p>创建一个 big.js 实例需要传入一个数字或字符串。下面是一个创建 big.js 实例的示例：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> num1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Big</span><span class="token punctuation">(</span><span class="token number">123.4567</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> num2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Big</span><span class="token punctuation">(</span><span class="token string">&#39;9876543210123456789&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="加法" tabindex="-1"><a class="header-anchor" href="#加法"><span>加法</span></a></h3><p>Big 对象可以使用 <code>plus()</code> 方法来进行加法操作，返回一个新的 Big 对象，不改变原有对象：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> num1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Big</span><span class="token punctuation">(</span><span class="token number">1.23</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> num2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Big</span><span class="token punctuation">(</span><span class="token number">4.56</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span> <span class="token comment">// 等价于 num1 + num2</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 5.79</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="减法" tabindex="-1"><a class="header-anchor" href="#减法"><span>减法</span></a></h3><p>Big 对象可以使用 <code>minus()</code> 方法来进行减法操作，返回一个新的 Big 对象，不改变原有对象：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> num1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Big</span><span class="token punctuation">(</span><span class="token number">1.23</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> num2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Big</span><span class="token punctuation">(</span><span class="token number">4.56</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span> <span class="token comment">// 等价于 num1 - num2</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// -3.33</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="乘法" tabindex="-1"><a class="header-anchor" href="#乘法"><span>乘法</span></a></h3><p>Big 对象可以使用 <code>times()</code> 方法来进行乘法操作，返回一个新的 Big 对象，不改变原有对象：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> num1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Big</span><span class="token punctuation">(</span><span class="token number">1.23</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> num2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Big</span><span class="token punctuation">(</span><span class="token number">4.56</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">times</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span> <span class="token comment">// 等价于 num1 * num2</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 5.6088</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="除法" tabindex="-1"><a class="header-anchor" href="#除法"><span>除法</span></a></h3><p>Big 对象可以使用 <code>div()</code> 方法来进行除法操作，返回一个新的 Big 对象，不改变原有对象：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> num1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Big</span><span class="token punctuation">(</span><span class="token number">1.23</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> num2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Big</span><span class="token punctuation">(</span><span class="token number">4.56</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span> <span class="token comment">// 等价于 num1 / num2</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0.26973684210526315789</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="幂运算" tabindex="-1"><a class="header-anchor" href="#幂运算"><span>幂运算</span></a></h3><p>Big 对象可以使用 <code>pow()</code> 方法来进行幂运算操作，返回一个新的 Big 对象，不改变原有对象：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> num1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Big</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> num2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Big</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span> <span class="token comment">// 等价于 num1 ** num2</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 8</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="比较" tabindex="-1"><a class="header-anchor" href="#比较"><span>比较</span></a></h3><p>Big 对象可以使用 <code>cmp()</code> 方法来进行比较操作，返回一个负数、零或正数，分别表示小于、等于或大于。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> num1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Big</span><span class="token punctuation">(</span><span class="token number">1.23</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> num2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Big</span><span class="token punctuation">(</span><span class="token number">4.56</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">cmp</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// -1</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num2<span class="token punctuation">.</span><span class="token function">cmp</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">cmp</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四舍五入和保留小数位数" tabindex="-1"><a class="header-anchor" href="#四舍五入和保留小数位数"><span>四舍五入和保留小数位数</span></a></h3><p>Big 对象可以使用 <code>toFixed()</code> 方法来进行四舍五入和保留小数位数操作：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> num1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Big</span><span class="token punctuation">(</span><span class="token number">1.23456789</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1.23</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1.23457</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1.2345678900</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,43))])}const v=t(u,[["render",k],["__file","bigjs.html.vue"]]),g=JSON.parse('{"path":"/blogs/js/bigjs.html","title":"Bigjs 解决 JavaScript 数值计算时精度问题处理","lang":"en-US","frontmatter":{"title":"Bigjs 解决 JavaScript 数值计算时精度问题处理","date":"2023-6-1","tags":["js"],"categories":["js"]},"headers":[{"level":2,"title":"js 精度问题","slug":"js-精度问题","link":"#js-精度问题","children":[{"level":3,"title":"1. 浮点数精度问题","slug":"_1-浮点数精度问题","link":"#_1-浮点数精度问题","children":[]},{"level":3,"title":"2. 整数运算超出范围","slug":"_2-整数运算超出范围","link":"#_2-整数运算超出范围","children":[]},{"level":3,"title":"3. 数字类型转换问题","slug":"_3-数字类型转换问题","link":"#_3-数字类型转换问题","children":[]},{"level":3,"title":"4. 小数点后多余的零","slug":"_4-小数点后多余的零","link":"#_4-小数点后多余的零","children":[]}]},{"level":2,"title":"Big.js","slug":"big-js","link":"#big-js","children":[{"level":3,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":3,"title":"使用方法","slug":"使用方法","link":"#使用方法","children":[]},{"level":3,"title":"创建一个 Big 对象","slug":"创建一个-big-对象","link":"#创建一个-big-对象","children":[]},{"level":3,"title":"进行运算","slug":"进行运算","link":"#进行运算","children":[]},{"level":3,"title":"设置运算精度","slug":"设置运算精度","link":"#设置运算精度","children":[]},{"level":3,"title":"十六进制和二进制格式","slug":"十六进制和二进制格式","link":"#十六进制和二进制格式","children":[]},{"level":3,"title":"加法","slug":"加法","link":"#加法","children":[]},{"level":3,"title":"减法","slug":"减法","link":"#减法","children":[]},{"level":3,"title":"乘法","slug":"乘法","link":"#乘法","children":[]},{"level":3,"title":"除法","slug":"除法","link":"#除法","children":[]},{"level":3,"title":"幂运算","slug":"幂运算","link":"#幂运算","children":[]},{"level":3,"title":"比较","slug":"比较","link":"#比较","children":[]},{"level":3,"title":"四舍五入和保留小数位数","slug":"四舍五入和保留小数位数","link":"#四舍五入和保留小数位数","children":[]}]}],"git":{"createdTime":1685591207000,"updatedTime":1717680921000,"contributors":[{"name":"motioliang","email":"rjwanghaoliang@ruijie.com.cn","commits":2},{"name":"motioliang","email":"1398814154@qq.com","commits":1}]},"filePathRelative":"blogs/js/bigjs.md"}');export{v as comp,g as data};
