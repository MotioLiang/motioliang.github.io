import{_ as s,c as a,e,o as p}from"./app-DKLT9RiB.js";const t={};function o(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h2 id="使用-proxy-实现观察者模式" tabindex="-1"><a class="header-anchor" href="#使用-proxy-实现观察者模式"><span>使用 Proxy 实现观察者模式</span></a></h2><blockquote><p>观察者模式（Observer mode）指的是函数自动观察数据对象，一旦对象有变化，函数就会自动执行。</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">observable</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">22</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;姓名：&#39;</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">&#39;年龄：&#39;</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span>age<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">observe</span><span class="token punctuation">(</span>print<span class="token punctuation">)</span></span>
<span class="line">person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;李四&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，数据<strong>person</strong>是观察目标，函数<strong>print</strong>是观察者，一旦对象发生变化，<strong>print</strong>就会自动执行。</p><p>下面，使用<strong>Proxy</strong>写一个观察者模式的最简单实现，即实现<strong>observable</strong>和<strong>observe</strong>这两个函数。思路是<strong>obervable</strong>函数返回一个原始对象的 Proxy 代理，拦截赋值操作，触发充当观察者的各个函数。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> queuedObservers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">observe</span> <span class="token operator">=</span> <span class="token parameter">fn</span> <span class="token operator">=&gt;</span> queuedObservers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">observable</span> <span class="token operator">=</span> <span class="token parameter">obj</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span> set <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span></span>
<span class="line">    queuedObservers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">observe</span> <span class="token operator">=&gt;</span> <span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> result</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，先定义了一个<strong>Set</strong>集合，所有的观察者函数都放进这个集合，然后，<strong>observable</strong>函数返回原始函数对象的代理，拦截赋值操作。拦截函数<strong>set</strong>之中，会自动执行所有的观察者。</p>`,7)]))}const i=s(t,[["render",o],["__file","proxy.html.vue"]]),r=JSON.parse('{"path":"/blogs/js/proxy.html","title":"ES6 原生实现观察者模式","lang":"en-US","frontmatter":{"title":"ES6 原生实现观察者模式","date":"2018-12-25T00:00:00.000Z","tags":["Proxy","js"],"categories":["js"]},"headers":[{"level":2,"title":"使用 Proxy 实现观察者模式","slug":"使用-proxy-实现观察者模式","link":"#使用-proxy-实现观察者模式","children":[]}],"git":{"createdTime":1639637702000,"updatedTime":1717680921000,"contributors":[{"name":"motioliang","email":"1398814154@qq.com","commits":1},{"name":"王浩亮","email":"wanghaoliang@epatient.cn","commits":1}]},"filePathRelative":"blogs/js/proxy.md"}');export{i as comp,r as data};
